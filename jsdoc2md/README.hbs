[![view on npm](http://img.shields.io/npm/v/command-line-args.svg)](https://www.npmjs.org/package/command-line-args)
[![npm module downloads per month](http://img.shields.io/npm/dm/command-line-args.svg)](https://www.npmjs.org/package/command-line-args)
[![Build Status](https://travis-ci.org/75lb/command-line-args.svg?branch=master)](https://travis-ci.org/75lb/command-line-args)
[![Dependency Status](https://david-dm.org/75lb/command-line-args.svg)](https://david-dm.org/75lb/command-line-args)

**work in progress, not quite ready**

#command-line-args
A command-line parser and usage-guide producer.. Particularly good at organising large sets of options. 

##Install
```sh
$ npm install command-line-args --save
```

##Synopsis
`app.js`: 
```js
var cliArgs = require("../");

var cli = cliArgs([
    { name: "verbose", type: Boolean, alias: "v", description: "Write plenty output" },
    { name: "help", type: Boolean, description: "Print usage instructions" },
    { name: "files", type: Array, defaultOption: true, description: "The input files" }
]);

var options = cli.parse(),
    usage = cli.usage({
        header: "A synopsis application.",
        footer: "For more information, visit http://example.com"
    });
    
console.log(options.help ? usage : options);
```

```sh
$ node app.js
{}
$ node app.js -v
{ verbose: true }
$ node app.js README.md package.json
{ files: [ 'README.md', 'package.json' ] }
$ node app.js README.md package.json -v
{ verbose: true, files: [ 'README.md', 'package.json' ] }
$ node app.js --help

  A synopsis application.

  Usage

  -v, --verbose    Write plenty output
  --help           Print usage instructions
  --files <array>  The input files

  For more information, visit http://example.com

```


##Usage
1. Define your command line options
2. Parse the supplied command line args
3. Get a usage-guide

###Define
Pass the `command-line-args` constructor an array of OptionDefinitions. 


###Parse
```js
var argv = cli.parse();
```


##Parse command line args
Supply a list of option definitions and get an instance of `command-line-args` back, complete with `parse` and `usage` methods. 


{{>docs}}