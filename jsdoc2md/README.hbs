[![view on npm](http://img.shields.io/npm/v/command-line-args.svg)](https://www.npmjs.org/package/command-line-args)
[![npm module downloads per month](http://img.shields.io/npm/dm/command-line-args.svg)](https://www.npmjs.org/package/command-line-args)
[![Build Status](https://travis-ci.org/75lb/command-line-args.svg?branch=rewrite)](https://travis-ci.org/75lb/command-line-args)
[![Dependency Status](https://david-dm.org/75lb/command-line-args.svg)](https://david-dm.org/75lb/command-line-args)

# command-line-args
A library to collect command-line args and generate a usage guide.

## Synopsis
Say your app was run with one of these commands (they are all equalivalent and parse the same)
```
$ my-app --verbose --timeout=1000 --src one.js --src two.js
$ my-app --verbose --timeout 1000 --src one.js two.js
$ my-app -vt 1000 --src one.js two.js
$ my-app -vt 1000 one.js two.js
```

then your app can access the values like this:

1\. First describe the options your app accepts (see [option definitions](#option-definitions)).
```js
var cliArgs = require("command-line-args");

var cli = cliArgs([
    {
        name: "help", description: "Display this usage guide.",
        alias: "h", type: Boolean
    },
    {
        name: "src", description: "The input files to process",
        alias: "f", type: String, multiple: true, defaultOption: true
    },
    {
        name: "timeout", description: "Timeout value in ms",
        alias: "t", type: Number,  
    }
]);
```

2\. then collect the command line args using `.parse()`
```js
var options = cli.parse();
```

`options` now looks like this:
```js
{
    files: [
        "one.js",
        "two.js"
    ],
    verbose: true,
    timeout: 1000  
}
```

The [.getUsage()](#module_command-line-args--CliArgs+getUsage) method generates a usage guide:
```js
var usage = cli.usage({
    title: "my-app",
    description: "Generates something useful",
    footer: "Project home: [underline]{https://github.com/me/my-app}"
});
```

..for example:
```
  my-app
  Generates something useful

  Usage
  $ cat input.json | my-app [<options>]
  $ my-app <files>

  -h, --help               Display this usage guide.
  -v, --verbose            Display this usage guide.
  -f, --src <string[]>     The input files to process
  -t, --timeout <number>   Timeout value in ms

  Project home: https://github.com/me/my-app
```

### Validation
Validation is out of scope for this library, which collects values only. Validate using another module or some code of your own. This example uses [test-value](https://github.com/75lb/test-value).

```js
var cliArgs = require("../");
var testValue = require("test-value");
var fs = require("fs");

var cli = cliArgs([
    { name: "help", type: Boolean },
    { name: "files", type: String, multiple: true, defaultOption: true },
    { name: "log-level", type: String }
]);

var options = cli.parse();

var usageForm = {};

usageForm.main = {
    files: function(files){
        return files && files.every(fs.existsSync);
    },
    "log-level": [ "info", "warn", "error", undefined ]
};

usageForm.help = {
    help: true
};

var valid = testValue(options, [ usageForm.main, usageForm.help ]);

if (!valid){
    // exit here
}
```

## Install

### as a library
```sh
$ npm install command-line-args --save
```

### as a command-line tool
```sh
$ npm install -g command-line-args
```

If you install globally you get the `command-line-args` test-harness. You test by piping in a module exporting an option definitions array,

All the following examples can be sampled by installing the command-line-args test harness (install globally). Usage:

```sh
$ cat example/one.js | command-line-args --main
{ main: true }

$ cat example/one.js | command-line-args --main --dessert
{ main: true, dessert: true }
```

# API Reference
{{>main~}}

* * *

&copy; 2015 Lloyd Brookes \<75pound@gmail.com\>. Documented by [jsdoc-to-markdown](https://github.com/75lb/jsdoc-to-markdown).
